#!___NEWLISPPATH___
(load "___CGIBINPATH___/wot.lsp")
(set (quote deletekeys)
  (lambda (emailaddress "noone@example.com")
    (begin
      (set (quote runstring) (string "___KEYRINGDIRPATH___/listkey.pub " emailaddress))
      ;(print (string "emailaddress to delete: " emailaddress))
      (set (quote runitlist) (catch (wot:runit runstring nil 20)))
      (set (quote todeletelist) (find-all {(fpr:)(:)+([^:]+)} (nth 1 runitlist) $3 0))
      ;(print (string "todeletelist: " todeletelist))
      (map
        (lambda (x)
          (begin
            (set (quote runstring) (string "___KEYRINGDIRPATH___/deletekey.pub " x))
            ;(print (string "deleting: " x))
            ;(print (string runstring "\n"))
            (set (quote runitlist) (catch (wot:runit runstring nil 20)))
            ;(print (string runitlist "\n"))
          )
        )
        todeletelist
      )
    )
  )
)
(deletekeys "alice@example.com")
(deletekeys "bob@example.com")
(deletekeys "charlie@example.com")
;(exit)
; https://curl.haxx.se/docs/httpscripting.html#POST
(set (quote runstring) (string "___KEYRINGDIRPATH___/listkey.pub"))
(set (quote runitlist) (catch (wot:runit runstring nil 20)))
(set (quote runstring) (string "___KEYRINGDIRPATH___/listkey.sec"))
(set (quote runitlist) (catch (wot:runit runstring nil 20)))
; create alice's keypair
; instead of creating alice's key on the fly, use a pregenerated one,
(set (quote runstring) (string "___KEYRINGDIRPATH___/importkey.sec ___KEYRINGDIRPATH___/seckey.exported.alice"))
;(print (string runstring "\n"))
(set (quote runitlist) (catch (wot:runit runstring nil 20)))
(set (quote runstring) (string "___KEYRINGDIRPATH___/importkey.pub ___KEYRINGDIRPATH___/pubkey.exported.alice"))
;(print (string runstring "\n"))
(set (quote runitlist) (catch (wot:runit runstring nil 20)))
(set (quote runstring) (string "___KEYRINGDIRPATH___/trustkey EC77010A1BC072DE"))
(set (quote runitlist) (catch (wot:runit runstring nil 20)))
(print "sponsoring bob...\n")
(set (quote runstring) (string "___CURLPATH___ --insecure --data \"" (trim (read-file "___KEYRINGDIRPATH___/input.sponsor")) "\" ___SERVERURL______RELATIVECGIBINPATH___/sponsor.lsp"))
(set (quote runitlist) (catch (wot:runit runstring nil 300)))
(if (!= nil (find "Applicant is now trusted." (nth 1 runitlist)))
  (print "PASS\n")
  (begin
    (print "FAIL\n")
    (print "This command failed: " runstring "\n")
    (print "with this output: " (nth 1 runitlist) "\n")
    (print "and this error: " (nth 2 runitlist) "\n")
    (print "find result: " (find "Applicant is now trusted." (nth 1 runitlist)) "\n")
  )
) 
(print "sponsoring bob with bad password...\n")
(set (quote runstring) (string "___CURLPATH___ --insecure --data \"" (trim (read-file "___KEYRINGDIRPATH___/input.sponsor.bad")) "\" ___SERVERURL______RELATIVECGIBINPATH___/sponsor.lsp"))
(set (quote runitlist) (catch (wot:runit runstring nil 20)))
(if (!= nil (find "Failed to verify password!" (nth 1 runitlist)))
  (print "PASS\n")
  (begin
    (print "FAIL\n")
    (print "This command failed: " runstring "\n")
    (print "with this output: " (nth 1 runitlist) "\n")
    (print "and this error: " (nth 2 runitlist) "\n")
    (print "find result: " (find "Applicant is now trusted." (nth 1 runitlist)) "\n")
  )
) 
; upload bob's key, pre-generated with genkey.sec input.genkey.bob
(print "uploading bob's key...\n")
(set (quote runstring) (string "___CURLPATH___ --insecure --data \"" (trim (read-file "___KEYRINGDIRPATH___/input.uploadkey")) "\" ___SERVERURL______RELATIVECGIBINPATH___/uploadkey.lsp"))
(set (quote runitlist) (catch (wot:runit runstring nil 60)))
(if (!= nil (find "Key successfully uploaded." (nth 1 runitlist)))
  (print "PASS\n")
  (begin
    (print "FAIL\n")
    (print "This command failed: " runstring "\n")
    (print "with this output: " (nth 1 runitlist) "\n")
    (print "and this error: " (nth 2 runitlist) "\n")
    (print "find result: " (find "Key successfully uploaded." (nth 1 runitlist)) "\n")
  )
) 
;(print "pausing after uploading bob's key.  hit enter to continue")
;(set (quote whateverinput) (read-line))
(print "uploading bob's key with bad password...\n")
(set (quote runstring) (string "___CURLPATH___ --insecure --data \"" (trim (read-file "___KEYRINGDIRPATH___/input.uploadkey.bad")) "\" ___SERVERURL______RELATIVECGIBINPATH___/uploadkey.lsp"))
(set (quote runitlist) (catch (wot:runit runstring nil 20)))
(if (!= nil (find "Failed to verify password!" (nth 1 runitlist)))
  (print "PASS\n")
  (begin
    (print "FAIL\n")
    (print "This command failed: " runstring "\n")
    (print "with this output: " (nth 1 runitlist) "\n")
    (print "and this error: " (nth 2 runitlist) "\n")
    (print "find result: " (find "Key successfully uploaded." (nth 1 runitlist)) "\n")
  )
) 
; sign uploaded key
(print "responsoring bob to tsign the new key...\n")
(set (quote runstring) (string "___CURLPATH___ --insecure --data \"" (trim (read-file "___KEYRINGDIRPATH___/input.sponsor")) "\" ___SERVERURL______RELATIVECGIBINPATH___/sponsor.lsp"))
(set (quote runitlist) (catch (wot:runit runstring nil 300)))
;(print "ran this command: " runstring "\n")
;(print "with this output: " (nth 1 runitlist) "\n")
;(print "and this error: " (nth 2 runitlist) "\n")
; upload charlie's key signed by bob's key, generated with input.genkey.charlie
; and signkey
;(print "pausing after tsigning bob's key.  hit enter to continue")
;(set (quote whateverinput) (read-line))
(print "uploading charlie's bob-signed key...\n")
(set (quote runstring) (string "___CURLPATH___ --insecure --data \"" (trim (read-file "___KEYRINGDIRPATH___/input.uploadsignedkey")) "\" ___SERVERURL______RELATIVECGIBINPATH___/uploadsignedkey.lsp"))
(set (quote runitlist) (catch (wot:runit runstring nil 60)))
(if (!= nil (find "Key successfully uploaded." (nth 1 runitlist)))
  (begin
    (print "PASS\n")
    ;(print "This command succeeded: " runstring "\n")
    ;(print "with this output: " (nth 1 runitlist) "\n")
    ;(print "and this error: " (nth 2 runitlist) "\n")
  )
  (begin
    (print "FAIL\n")
    (print "This command failed: " runstring "\n")
    (print "with this output: " (nth 1 runitlist) "\n")
    (print "and this error: " (nth 2 runitlist) "\n")
    (print "find result: " (find "Key successfully uploaded." (nth 1 runitlist)) "\n")
  )
) 
; is charlie trusted?
(print "checktrust for charlie...\n")
(set (quote runstring) (string "/usr/bin/curl --insecure --data \"" (trim (read-file "___KEYRINGDIRPATH___/input.checktrust.charlie")) "\" ___SERVERURL______RELATIVECGIBINPATH___/checktrust.lsp"))
(set (quote runitlist) (catch (wot:runit runstring nil 60)))
(if (!= nil (find "charlie@example.com applicant trusted" (nth 1 runitlist)))
  (print "PASS\n")
  (begin
    (print "FAIL\n")
    (print "This command failed: " runstring "\n")
    (print "with this output: " (nth 1 runitlist) "\n")
    (print "and this error: " (nth 2 runitlist) "\n")
    (print "find result: " (find "charlie@example.com applicant trusted" (nth 1 runitlist)) "\n")
    ;(print "pausing before unsponsoring bob.  hit enter to continue")
    ;(set (quote whateverinput) (read-line))
    ;(set (quote runitlist) (catch (wot:runit runstring nil 60)))
    ;(print "ran plottrust.lsp: " runstring "\n")
    ;(print "with this output: " (nth 1 runitlist) "\n")
    ;(print "and this error: " (nth 2 runitlist) "\n")
  )
)
(print "sponsoring charlie with alice's key...\n")
(set (quote runstring) (string "/usr/bin/curl --insecure --data \"" (trim (read-file "___KEYRINGDIRPATH___/input.sponsor.charlie")) "\" ___SERVERURL______RELATIVECGIBINPATH___/sponsor.lsp"))
(set (quote runitlist) (catch (wot:runit runstring nil 300)))
(if (!= nil (find "Applicant is now trusted." (nth 1 runitlist)))
  (print "PASS\n")
  (begin
    (print "FAIL\n")
    (print "This command failed: (" runstring ")\n")
    (print "with this output: (" (nth 1 runitlist) ")\n")
    (print "and this error: (" (nth 2 runitlist) ")\n")
    (print "find result: " (find "Applicant is now trusted." (nth 1 runitlist)) "\n")
  )
)
(print "uploading charlie's bob-signed key with bad key...\n")
(set (quote runstring) (string "___CURLPATH___ --insecure --data \"" (trim (read-file "___KEYRINGDIRPATH___/input.uploadsignedkey.bad")) "\" ___SERVERURL______RELATIVECGIBINPATH___/uploadsignedkey.lsp"))
(set (quote runitlist) (catch (wot:runit runstring nil 60)))
(if (!= nil (find "Form email address does not match key address!" (nth 1 runitlist)))
  (print "PASS\n")
  (begin
    (print "FAIL\n")
    (print "This command failed: " runstring "\n")
    (print "with this output: " (nth 1 runitlist) "\n")
    (print "and this error: " (nth 2 runitlist) "\n")
    (print "find result: " (find "Key successfully uploaded." (nth 1 runitlist)) "\n")
  )
) 
(print "unsponsoring bob...\n")
(set (quote runstring) (string "___CURLPATH___ --insecure --data \"" (trim (read-file "___KEYRINGDIRPATH___/input.unsponsor")) "\" ___SERVERURL______RELATIVECGIBINPATH___/unsponsor.lsp"))
(set (quote runitlist) (catch (wot:runit runstring nil 20)))
(if (!= nil (find "Applicant is now not trusted." (nth 1 runitlist)))
  (print "PASS\n")
  (begin
    (print "FAIL\n")
    (print "This command failed: " runstring "\n")
    (print "with this output: " (nth 1 runitlist) "\n")
    (print "and this error: " (nth 2 runitlist) "\n")
    (print "find result: " (find "Applicant is now not trusted." (nth 1 runitlist)) "\n")
  )
) 
(print "unsponsoring bob with bad password...\n")
(set (quote runstring) (string "___CURLPATH___ --insecure --data \"" (trim (read-file "___KEYRINGDIRPATH___/input.unsponsor.bad")) "\" ___SERVERURL______RELATIVECGIBINPATH___/unsponsor.lsp"))
(set (quote runitlist) (catch (wot:runit runstring nil 20)))
(if (!= nil (find "Failed to verify password!" (nth 1 runitlist)))
  (print "PASS\n")
  (begin
    (print "FAIL\n")
    (print "This command failed: " runstring "\n")
    (print "with this output: " (nth 1 runitlist) "\n")
    (print "and this error: " (nth 2 runitlist) "\n")
    (print "find result: " (find "Applicant is now not trusted." (nth 1 runitlist)) "\n")
  )
) 
(print "checktrust for charlie after unsponsoring bob, should still be alice-sponsored...\n")
(set (quote runstring) (string "/usr/bin/curl --insecure --data \"" (trim (read-file "___KEYRINGDIRPATH___/input.checktrust.charlie")) "\" ___SERVERURL______RELATIVECGIBINPATH___/checktrust.lsp"))
(set (quote runitlist) (catch (wot:runit runstring nil 60)))
(if (!= nil (find "charlie@example.com applicant trusted" (nth 1 runitlist)))
  (print "PASS\n")
  (begin
    (print "FAIL\n")
    (print "This command failed: " runstring "\n")
    (print "with this output: " (nth 1 runitlist) "\n")
    (print "and this error: " (nth 2 runitlist) "\n")
    (print "find result: " (find "charlie@example.com applicant trusted" (nth 1 runitlist)) "\n")
  )
)
(print "unsponsoring charlie...\n")
(set (quote runstring) (string "/usr/bin/curl --insecure --data \"" (trim (read-file "___KEYRINGDIRPATH___/input.unsponsor.charlie")) "\" ___SERVERURL______RELATIVECGIBINPATH___/unsponsor.lsp"))
(set (quote runitlist) (catch (wot:runit runstring nil 120)))
(if (!= nil (find "Applicant is now not trusted." (nth 1 runitlist)))
  (print "PASS\n")
  (begin
    (print "FAIL\n")
    (print "This command failed: " runstring "\n")
    (print "with this output: " (nth 1 runitlist) "\n")
    (print "and this error: " (nth 2 runitlist) "\n")
    (print "find result: " (find "Applicant is now not trusted." (nth 1 runitlist)) "\n")
  )
)
(print "checktrust for charlie after unsponsoring charlie ...\n")
(set (quote runstring) (string "/usr/bin/curl --insecure --data \"" (trim (read-file "___KEYRINGDIRPATH___/input.checktrust.charlie")) "\" ___SERVERURL______RELATIVECGIBINPATH___/checktrust.lsp"))
(set (quote runitlist) (catch (wot:runit runstring nil 60)))
(if (!= nil (find "charlie@example.com applicant not trusted" (nth 1 runitlist)))
  (begin
    (print "PASS\n")
  )
  (begin
    (print "FAIL\n")
    (print "This command failed: " runstring "\n")
    (print "with this output: " (nth 1 runitlist) "\n")
    (print "and this error: " (nth 2 runitlist) "\n")
    (print "find result: " (find "charlie@example.com applicant not trusted" (nth 1 runitlist)) "\n")
  )
)
; remove test keys
(print "deleting keys for alice@example.com, bob@example.com, charlie@example.com\n")
(deletekeys "alice@example.com")
(deletekeys "bob@example.com")
(deletekeys "charlie@example.com")
;(! (string "___KEYRINGDIRPATH___/listkey.pub"))
;(! (string "___KEYRINGDIRPATH___/listkey.sec"))
(exit)
